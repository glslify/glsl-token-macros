const tokenize = require('glsl-tokenizer')
const tokenMacros = require('./')
const test = require('tape')
const path = require('path')
const fs = require('fs')

test('glsl-token-macros', function (t) {
  const src = fs.readFileSync(path.join(__dirname, 'fixture.glsl'), 'utf8')
  const tokens = tokenize(src)
  const macros = tokenMacros(tokens)

  const name = macros.map(function (d) { return d.name })
  const args = macros.map(function (d) { return d.args })
  const vals = macros.map(function (d) { return d.value })

  var n = 0
  var a = 0
  var v = 0

  t.equal(macros.length, 15, '15 macros discovered')

  t.equal(name[n++], 'NO_VALUE', 'name: NO_VALUE')
  t.equal(name[n++], 'BOOLEAN_TRUE', 'name: BOOLEAN_TRUE')
  t.equal(name[n++], 'BOOLEAN_FALSE', 'name: BOOLEAN_FALSE')
  t.equal(name[n++], 'INTEGER', 'name: INTEGER')
  t.equal(name[n++], 'FLOAT', 'name: FLOAT')
  t.equal(name[n++], 'VECTOR', 'name: VECTOR')
  t.equal(name[n++], 'TERMINATED', 'name: TERMINATED')
  t.equal(name[n++], 'WRAPPED_PARENS', 'name: WRAPPED_PARENS')
  t.equal(name[n++], 'ONE_ARGUMENT', 'name: ONE_ARGUMENT')
  t.equal(name[n++], 'ONE_ARGUMENT_WITH_FUNCTION', 'name: ONE_ARGUMENT_WITH_FUNCTION')
  t.equal(name[n++], 'TWO_ARGUMENT', 'name: TWO_ARGUMENT')
  t.equal(name[n++], 'TWO_ARGUMENT_WITH_FUNCTION', 'name: TWO_ARGUMENT_WITH_FUNCTION')
  t.equal(name[n++], 'NESTED_NO_VALUE', 'name: NESTED_NO_VALUE')
  t.equal(name[n++], 'NESTED_VALUE', 'name: NESTED_VALUE')
  t.equal(name[n++], 'NESTED_ARGUMENT', 'name: NESTED_ARGUMENT')

  t.deepEqual(args[a++], false, 'args: false')
  t.deepEqual(args[a++], false, 'args: false')
  t.deepEqual(args[a++], false, 'args: false')
  t.deepEqual(args[a++], false, 'args: false')
  t.deepEqual(args[a++], false, 'args: false')
  t.deepEqual(args[a++], false, 'args: false')
  t.deepEqual(args[a++], false, 'args: false')
  t.deepEqual(args[a++], false, 'args: false')
  t.deepEqual(args[a++], ['a'], 'args: ["a"]')
  t.deepEqual(args[a++], ['a'], 'args: ["a"]')
  t.deepEqual(args[a++], ['a', 'b'], 'args: ["a", "b"]')
  t.deepEqual(args[a++], ['a', 'b'], 'args: ["a", "b"]')
  t.deepEqual(args[a++], false, 'args: false')
  t.deepEqual(args[a++], false, 'args: false')
  t.deepEqual(args[a++], ['a'], 'args: ["a"]')

  t.equal(vals[v++], '', 'value: ""')
  t.equal(vals[v++], 'true', 'value: "true"')
  t.equal(vals[v++], 'false', 'value: "false"')
  t.equal(vals[v++], '42', 'value: "42"')
  t.equal(vals[v++], '42.0', 'value: "42.0"')
  t.equal(vals[v++], 'vec3(4)', 'value: "vec3(4)"')
  t.equal(vals[v++], 'vec4(0);', 'value: "vec4(0);"')
  t.equal(vals[v++], '(vec4(0, 0, 2, 3))', 'value: "(vec4(0, 0, 2, 3))"')
  t.equal(vals[v++], 'a * 0.5 + 0.5', 'value: "a * 0.5 + 0.5"')
  t.equal(vals[v++], 'race(a) * 0.5 + 0.5', 'value: "race(a) * 0.5 + 0.5"')
  t.equal(vals[v++], '(a * 0.5 + b)', 'value: "(a * 0.5 + b)"')
  t.equal(vals[v++], '(race(b) * 0.5 + race(a))', 'value: "(race(b) * 0.5 + race(a))"')
  t.equal(vals[v++], '', 'value: ""')
  t.equal(vals[v++], '42', 'value: "42"')
  t.equal(vals[v++], '(a * 0.5 + 0.5)', 'value: "(a * 0.5 + 0.5)"')

  t.end()
})
